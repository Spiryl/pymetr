# Minimal Code Structure - 2025-02-27 19:02:43.504567

# src\pymetr\__main__.py
def main()

# src\pymetr\core\actions.py
class ActionCategory(Enum): pass

class MenuItem: pass

class Action:
    def can_execute(state) -> bool

class FileActions:
    def new_suite(state) -> <ast.Constant object at 0x0000022D1390D250>
    def open_suite(state) -> <ast.Constant object at 0x0000022D139051D0>
    def save_suite(state) -> <ast.Constant object at 0x0000022D138FAB10>
    def add_script_to_suite(state, suite_id: str) -> <ast.Constant object at 0x0000022D138F5710>
    def new_script(state) -> <ast.Constant object at 0x0000022D13944150>
    def open_script(state) -> <ast.Constant object at 0x0000022D13913390>
    def save_script(state) -> <ast.Constant object at 0x0000022D13910D90>

class RunActions:
    def run_script(state) -> <ast.Constant object at 0x0000022D13949F50>
    def stop_script(state) -> <ast.Constant object at 0x0000022D13950750>

class InstrumentActions:
    def discover_instruments(state) -> <ast.Constant object at 0x0000022D13953AD0>


# src\pymetr\core\context.py
class TestContext:
    def __init__(script: TestScript, engine)
    def progress() -> float
    def progress(value: float)
    def status() -> TestStatus
    def status(value: TestStatus)
    def elapsed_time() -> float
    def create_result(name: str) -> TestResult
    def create_group(name: str) -> TestGroup
    def create_plot(title: str) -> Plot
    def create_trace(name: str, x_data, y_data, **kwargs) -> Trace
    def create_table(title: str) -> DataTable
    def create_marker(name: str, **kwargs) -> Marker
    def create_cursor(name: str, **kwargs) -> Cursor
    def get_result(name: str) -> Optional[TestResult]
    def get_plot(title: str) -> Optional[Plot]
    def wait(milliseconds: int)
    def on_script_start()
    def on_script_error(error: Exception)
    def on_script_complete()
    def get_instrument(model_filter: str, resource: str) -> Device
    def create_connection(connection_type: str, **kwargs) -> Any
    def create_driver(driver_name: str, connection) -> Any
    def send_scpi_command(device: Device, command: str) -> str
    def show_manual_connection_dialog() -> Device


# src\pymetr\core\engine.py
class SuiteRunner(QObject):
    def __init__(engine)
    def run_suite(suite_id: str)
    def stop_suite()

class ScriptRunner(QThread):
    def __init__(script_path: Path, globals_dict: dict)
    def run()
    def stop()

class Engine(QObject):
    def __init__(state)
    def run_suite(suite_id: str)
    def stop_suite()
    def run_test_script(script_id: str) -> <ast.Constant object at 0x0000022D13908E50>
    def wait(milliseconds: int) -> <ast.Constant object at 0x0000022D13DE4810>


# src\pymetr\core\logging.py
class CustomFormatter(logging.Formatter):
    def format(record)

class StatusLogHandler(logging.Handler):
    def __init__(state)
    def emit(record)

class ConsoleLogHandler(QObject):
    def __init__(level)
    def handle(record)
    def setLevel(level)
    def setFormatter(formatter)
    def format(record)
    def close()
    def addFilter(filter)
    def removeFilter(filter)

def setup_logging(log_to_file: bool)
def setup_status_logging(state, logger_name)
def set_log_level(level, logger_name)

# src\pymetr\core\registry.py
class ConnectionType(Enum): pass

class DriverInfo: pass

class InstrumentRegistry(QObject):
    def __init__()
    def register_driver(model: str, info: DriverInfo) -> <ast.Constant object at 0x0000022D138F2DD0>
    def create_device(info: Dict[<ast.Tuple object at 0x0000022D1390B590>]) -> Optional[Device]
    def get_driver_class(model: str) -> Optional[Type]
    def create_driver_instance(device: Device, connection: ConnectionInterface, threaded_mode: bool) -> Optional[object]
    def get_supported_interfaces(model: str) -> List[ConnectionType]
    def get_discovery_config(model: str) -> Optional[Dict[<ast.Tuple object at 0x0000022D1395FF50>]]
    def cleanup_device(device_id: str) -> <ast.Constant object at 0x0000022D13944590>
    def get_device(device_id: str) -> Optional[Device]
    def get_driver_instance(device_id: str) -> Optional[object]

def get_registry() -> InstrumentRegistry

# src\pymetr\core\state.py
class DiscoveryWorker(QObject):
    def __init__(model_filter: Optional[List[str]])
    def discover()
    def stop()

class ApplicationState(QObject):
    def __init__()
    def set_parent(parent: QObject)
    def register_model(model: BaseModel) -> <ast.Constant object at 0x0000022D13DB3E10>
    def link_models(parent_id: str, child_id: str) -> <ast.Constant object at 0x0000022D138EB790>
    def unlink_models(parent_id: str, child_id: str) -> <ast.Constant object at 0x0000022D139076D0>
    def get_model(model_id: str) -> Optional[BaseModel]
    def get_models_by_type(model_type: Type[T]) -> List[T]
    def get_children(parent_id: str) -> List[BaseModel]
    def get_parent(child_id: str) -> Optional[BaseModel]
    def set_active_test(model_id: Optional[str]) -> <ast.Constant object at 0x0000022D13950A10>
    def get_active_test() -> Optional[BaseModel]
    def set_active_model(model_id: Optional[str]) -> <ast.Constant object at 0x0000022D13947590>
    def get_model_by_name(name: str) -> Optional[BaseModel]
    def get_active_model() -> Optional[BaseModel]
    def create_model(model_class: Type[T], **kwargs) -> T
    def remove_model(model_id: str) -> <ast.Constant object at 0x0000022D13971B10>
    def clear_children(parent_id: str) -> <ast.Constant object at 0x0000022D13971010>
    def set_status(message: str)
    def set_progress(percent: float, message: str)
    def set_error(message: str)
    def set_warning(message: str)
    def set_info(message: str)
    def queue_model_update(model_id: str, prop: str, value: Any)
    def update_active_view(model_id: str)
    def discover_instruments(model_filter: Optional[List[str]])
    def stop_discovery()
    def get_discovered_instruments() -> Dict[<ast.Tuple object at 0x0000022D13DBE650>]
    def connect_instrument(info: Dict[<ast.Tuple object at 0x0000022D13DBEBD0>])
    def set_theme(theme_name: str) -> bool
    def set_accent_color(color) -> bool
    def get_resource(resource_type: str, name: str, **kwargs)


# src\pymetr\drivers\base\connections.py
class ConnectionInterface(ABC):
    def __init__(read_termination: str, write_termination: str, encoding: str)
    def open()
    def close()
    def write(command: str)
    def has_data() -> bool
    def read_available() -> bytes
    def read() -> str
    def query(command: str) -> str
    def clear_buffer()

class PyVisaConnection(ConnectionInterface):
    def __init__(resource_string: str, timeout: int, read_termination: str, write_termination: str, encoding: str)
    def list_instruments(query: str) -> Dict[<ast.Tuple object at 0x0000022D139916D0>]
    def select_instrument(filter_query)
    def read_sync() -> str
    def open()
    def close()
    def write(command: str)
    def has_data() -> bool
    def read_available() -> bytes

class RawSocketConnection(ConnectionInterface):
    def parse_resource_string(resource: str) -> tuple[<ast.Tuple object at 0x0000022D138F9450>]
    def __init__(host: str, port: int, timeout: float, encoding: str, read_termination: str, write_termination: str)
    def open()
    def close()
    def write(command: str)
    def has_data() -> bool
    def read_available() -> bytes
    def list_instruments(methods: List[str], timeout: float) -> Dict[<ast.Tuple object at 0x0000022D138F0F50>]
    def get_all_local_ip_ranges(default: str) -> List[str]
    def is_private_ip(ip: str) -> bool
    def parse_datagram(datagram: bytes) -> str


# src\pymetr\drivers\base\instrument.py
class ConnectionWorker(QObject):
    def __init__(connection)
    def process_commands()
    def stop()
    def write(command: str)
    def read()
    def query(command: str)

class ABCQObjectMeta(<ast.Call object at 0x0000022D13E0E9D0>, ABCMeta): pass

class Instrument(QObject):
    def __init__(connection: ConnectionInterface, read_after_write: bool, read_timeout: float, threaded_mode: bool, parent: Optional[QObject])
    def open()
    def close()
    def write(command: str) -> <ast.Constant object at 0x0000022D13E23F10>
    def read() -> str
    def query(command: str) -> str
    def set_continuous_mode(mode: bool)
    def set_unique_id(uid: str)
    def fetch_trace(*args, **kwargs)
    def gui_command(func)
    def list_instruments(cls, model_filter: Optional[List[str]]) -> Dict[<ast.Tuple object at 0x0000022D13E72E10>]

class SCPIInstrument(Instrument):
    def __init__(connection, read_after_write, timeout, parent, **kwargs)
    def data_mode() -> str
    def data_mode(mode: str)
    def data_type() -> str
    def data_type(dtype: str)
    def idn() -> str
    def get_identity() -> str
    def query_operation_complete()
    def reset()
    def clear_status_registers()
    def set_operation_complete()
    def check_error_queue() -> List[str]
    def write_binary_data(command: str, data: np.ndarray)
    def read_binary_data() -> np.ndarray

class Subsystem:
    def __init__(instr, cmd_prefix, index)
    def write(command: str) -> <ast.Constant object at 0x0000022D13EB8A50>
    def read() -> str
    def query(command: str) -> str
    def build(cls, parent, cmd_prefix, indices)


# src\pymetr\drivers\base\properties.py
class PropertyResponse: pass

class Property(ABC):
    def __init__(cmd_str: str, doc_str: str, access: str, join_char: str)
    def getter(instance) -> Any
    def setter(instance, value)

class ValueProperty(Property):
    def __init__(cmd_str: str, type: str, range: Optional[Tuple], units: str, doc_str: str, access: str, join_char: str)
    def getter(instance) -> Union[<ast.Tuple object at 0x0000022D13DE86D0>]
    def setter(instance, value)

class SwitchProperty(Property):
    def __init__(cmd_str: str, doc_str: str, format: str, access: str, join_char: str)
    def getter(instance) -> bool
    def setter(instance, value)

class SelectProperty(Property):
    def __init__(cmd_str: str, choices: Union[<ast.Tuple object at 0x0000022D1395DE10>], doc_str: str, access: str, join_char: str)
    def getter(instance) -> Union[<ast.Tuple object at 0x0000022D1398E950>]
    def setter(instance, value)

class DataProperty(Property):
    def __init__(cmd_str: str, access: str, doc_str: str, container, converter: Callable, separator: str, join_char: str, terminator: str)
    def getter(instance) -> Any
    def setter(instance, value)

class DataBlockProperty(Property):
    def __init__(cmd_str: str, access: str, doc_str: str, container, dtype, ieee_header: bool)
    def getter(instance) -> np.ndarray
    def setter(instance, value)


# src\pymetr\drivers\base\sources.py
class Sources(QObject):
    def __init__(sources)
    def source()
    def source(sources)
    def sources()
    def add_source(source)
    def remove_source(source)
    def set_sources(sources)
    def source_command(command_template, formatter, single, join_str)


# src\pymetr\drivers\base\visitor.py
class InstrumentVisitor(ast.NodeVisitor):
    def __init__()
    def build_instrument_data_model(driver_source: str) -> dict
    def visit_ClassDef(node)
    def extract_instrument_info(node)
    def extract_method_info(item)
    def is_gui_method(node)
    def process_assignment(item)
    def get_return_annotation(node)
    def handle_indexed_subsystem(node, subsystem_info, properties_methods)
    def visit_Assign(node)
    def get_ast_node_value(node)

class SubsystemVisitor(ast.NodeVisitor):
    def __init__()
    def visit_ClassDef(node)
    def visit_Assign(node)
    def parse_property_details(call_node, prop_class_name, prop_name)
    def get_ast_node_value(node)

def print_consolidated_view(instrument)
def print_properties(properties, is_last)
def format_property_summary(prop)

# src\pymetr\drivers\instruments\dsox1204g.py
class Dsox1204g(SCPIInstrument):
    def __init__(connection)
    def format()
    def format(new_fmt)
    def autoscale(*sources)
    def digitize(*sources)
    def single()
    def stop()
    def run()
    def fetch_trace(*sources)

class Acquire(Subsystem): pass

class Channel(Subsystem): pass

class Timebase(Subsystem): pass

class Trigger(Subsystem): pass

class WaveGen(Subsystem): pass

class Waveform(Subsystem): pass


# src\pymetr\drivers\instruments\hp8563a.py
class TriggerMode(Enum): pass

class ScaleType(Enum): pass

class DetectorMode(Enum): pass

class FrequencySubsystem(Subsystem): pass

class AmplitudeSubsystem(Subsystem): pass

class BandwidthSubsystem(Subsystem): pass

class SweepSubsystem(Subsystem): pass

class TraceSubsystem(Subsystem): pass

class HP8563A(SCPIInstrument):
    def __init__(connection)
    def fetch_trace()
    def is_sweep_complete() -> bool
    def abort_sweep()
    def single_sweep()
    def continuous_sweep()
    def preset()
    def get_identity() -> str
    def check_error() -> tuple[<ast.Tuple object at 0x0000022D139525D0>]


# src\pymetr\drivers\instruments\hs9000.py
class HS9000(SCPIInstrument):
    def __init__(connection, **kwargs)

class Channel(Subsystem): pass

class Reference(Subsystem): pass

class IP(Subsystem): pass

class Communication(Subsystem): pass

class Diagnostics(Subsystem):
    def start()
    def get_status() -> str
    def get_errors() -> str
    def get_board_info() -> str


# src\pymetr\drivers\instruments\plugin.py
def load_registry() -> Dict[<ast.Tuple object at 0x0000022D13DE1950>]
def get_driver_info(model: str) -> Dict[<ast.Tuple object at 0x0000022D13907710>]

# src\pymetr\drivers\instruments\registry.py
def get_driver_info(model: str) -> Dict[<ast.Tuple object at 0x0000022D138C6E10>]

# src\pymetr\models\analysis.py
class Analysis(BaseModel):
    def __init__(name: str, input_trace_id: str, model_id: Optional[str])
    def input_trace() -> Optional[<ast.Constant object at 0x0000022D13E44310>]
    def parent_plot() -> Optional[<ast.Constant object at 0x0000022D13E44E90>]
    def create_marker(**kwargs) -> <ast.Constant object at 0x0000022D13E476D0>
    def create_cursor(**kwargs) -> <ast.Constant object at 0x0000022D13E25010>
    def create_trace(**kwargs) -> <ast.Constant object at 0x0000022D13E25C90>
    def update()
    def get_analysis_data() -> Tuple[<ast.Tuple object at 0x0000022D13E15890>]

class EdgeMeasurement(Analysis):
    def __init__(name: str, input_trace_id: str, edge_type: str, **kwargs)
    def update()

class RiseTime(EdgeMeasurement):
    def __init__(input_trace_id: str, **kwargs)

class FallTime(EdgeMeasurement):
    def __init__(input_trace_id: str, **kwargs)

class PulseWidth(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class PhaseDifference(Analysis):
    def __init__(input_trace_id: str, reference_trace_id: str, **kwargs)
    def update()

class SlewRate(EdgeMeasurement):
    def __init__(input_trace_id: str, edge_type: str, **kwargs)
    def update()

class DutyCycle(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class Overshoot(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class Jitter(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class EyeDiagram(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class SpectralAnalysis(Analysis):
    def __init__(input_trace_id: str, **kwargs)

class FFT(SpectralAnalysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class PeriodMeasurement(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()

class PeakToPeak(Analysis):
    def __init__(input_trace_id: str, **kwargs)
    def update()


# src\pymetr\models\analysis_dual.py
class DualTraceAnalysis(Analysis):
    def __init__(name: str, trace_a_id: str, trace_b_id: str, **kwargs)
    def trace_a()
    def trace_b()

class TraceMath(DualTraceAnalysis):
    def __init__(trace_a_id: str, trace_b_id: str, operation: str, **kwargs)
    def update()

class CrossCorrelation(DualTraceAnalysis):
    def __init__(trace_a_id: str, trace_b_id: str, **kwargs)
    def update()

class CrossSpectrum(DualTraceAnalysis, SpectralAnalysis):
    def __init__(trace_a_id: str, trace_b_id: str, **kwargs)
    def update()


# src\pymetr\models\base.py
class BaseModel(QObject):
    def __init__(model_type: str, state, model_id: Optional[str], name: Optional[str])
    def id() -> str
    def name() -> str
    def set_property(name: str, value: object) -> <ast.Constant object at 0x0000022D13E45E10>
    def get_property(prop: str, default: Any) -> Any
    def begin_update() -> <ast.Constant object at 0x0000022D13E16850>
    def end_update() -> <ast.Constant object at 0x0000022D13E16950>
    def add_child(child_model: <ast.Constant object at 0x0000022D13E14890>) -> <ast.Constant object at 0x0000022D13E27010>
    def get_children() -> list[<ast.Constant object at 0x0000022D13E24C50>]
    def clear_children() -> <ast.Constant object at 0x0000022D13E0DF90>
    def cleanup() -> <ast.Constant object at 0x0000022D13E0C650>
    def deleteLater() -> <ast.Constant object at 0x0000022D13E0FB90>
    def show() -> <ast.Constant object at 0x0000022D1399D310>


# src\pymetr\models\cursor.py
class Cursor(BaseModel):
    def __init__(name: str, axis: str, position: float, color: str, style: str, width: int, visible: bool, model_id: Optional[str])
    def name() -> str
    def name(value: str)
    def axis() -> str
    def axis(value: str)
    def position() -> float
    def position(value: float)
    def color() -> str
    def color(value: str)
    def style() -> str
    def style(value: str)
    def width() -> int
    def width(value: int)
    def visible() -> bool
    def visible(value: bool)
    def set_position(pos: float)


# src\pymetr\models\device.py
class AcquisitionMode(Enum): pass

class Device(BaseModel):
    def __init__(manufacturer: Optional[str], model: Optional[str], serial_number: Optional[str], firmware: Optional[str], resource: Optional[str], model_id: Optional[str], state)
    def from_discovery_info(cls, info: Dict[<ast.Tuple object at 0x0000022D1395F510>], state) -> <ast.Constant object at 0x0000022D13973550>
    def default_plot()
    def start_acquisition()
    def stop_acquisition()
    def connect_device()
    def disconnect()
    def driver_info() -> Dict[<ast.Tuple object at 0x0000022D13E08490>]
    def parameter_tree() -> Any
    def error_message() -> Optional[str]
    def error_message(value: Optional[str])
    def update_parameter(path: str, value: Any) -> <ast.Constant object at 0x0000022D13E15310>
    def set_connection_state(connected: bool) -> <ast.Constant object at 0x0000022D13E16BD0>
    def refresh_parameters() -> <ast.Constant object at 0x0000022D13E47010>
    def reset_state() -> <ast.Constant object at 0x0000022D13E45110>
    def cleanup()


# src\pymetr\models\marker.py
class Marker(BaseModel):
    def __init__(x: float, y: float, name: str, color: str, size: int, symbol: str, visible: bool, model_id: Optional[str])
    def x() -> float
    def x(value: float)
    def y() -> float
    def y(value: float)
    def name() -> str
    def name(value: str)
    def color() -> str
    def color(value: str)
    def size() -> int
    def size(value: int)
    def symbol() -> str
    def symbol(value: str)
    def visible() -> bool
    def visible(value: bool)
    def position() -> Tuple[<ast.Tuple object at 0x0000022D1391C350>]
    def bound_to_trace() -> bool
    def get_position() -> Tuple[<ast.Tuple object at 0x0000022D1398E010>]
    def get_uncertainty_bounds() -> Tuple[<ast.Tuple object at 0x0000022D13E45910>]
    def follows_parent_isolation() -> bool
    def set_position(x: float, y: float)


# src\pymetr\models\measurement.py
class Measurement(BaseModel):
    def __init__(name: str, value: float, units: str, model_id: Optional[str])
    def name() -> str
    def value() -> float
    def value(val: float)
    def units() -> str
    def set_limits(min_val: float, max_val: float)
    def to_string() -> str


# src\pymetr\models\plot.py
class Plot(BaseModel):
    def __init__(title: str, model_id: Optional[str], name: Optional[str])
    def title() -> str
    def title(value: str)
    def x_label() -> str
    def x_label(value: str)
    def y_label() -> str
    def y_label(value: str)
    def x_unit() -> str
    def x_unit(value: str)
    def y_unit() -> str
    def y_unit(value: str)
    def grid_enabled() -> bool
    def grid_enabled(value: bool)
    def legend_enabled() -> bool
    def legend_enabled(value: bool)
    def roi() -> Optional[List[float]]
    def roi(value: Optional[List[float]])
    def roi_visible() -> bool
    def roi_visible(value: bool)
    def background_color() -> str
    def background_color(value: str)
    def foreground_color() -> str
    def foreground_color(value: str)
    def grid_color() -> str
    def grid_color(value: str)
    def grid_alpha() -> float
    def grid_alpha(value: float)
    def legend_position() -> str
    def legend_position(value: str)
    def x_log() -> bool
    def x_log(value: bool)
    def y_log() -> bool
    def y_log(value: bool)
    def x_inverted() -> bool
    def x_inverted(value: bool)
    def y_inverted() -> bool
    def y_inverted(value: bool)
    def x_ticks() -> Optional[List[float]]
    def x_ticks(value: Optional[List[float]])
    def y_ticks() -> Optional[List[float]]
    def y_ticks(value: Optional[List[float]])
    def x_tick_labels() -> Optional[List[str]]
    def x_tick_labels(value: Optional[List[str]])
    def y_tick_labels() -> Optional[List[str]]
    def y_tick_labels(value: Optional[List[str]])
    def x_lim() -> Optional[Tuple[<ast.Tuple object at 0x0000022D1390A5D0>]]
    def x_lim(value: Optional[Tuple[<ast.Tuple object at 0x0000022D139099D0>]])
    def y_lim() -> Optional[Tuple[<ast.Tuple object at 0x0000022D13DE55D0>]]
    def y_lim(value: Optional[Tuple[<ast.Tuple object at 0x0000022D13DE51D0>]])
    def add(item: Union[<ast.Tuple object at 0x0000022D13DE7E10>]) -> <ast.Constant object at 0x0000022D139868D0>
    def create_trace(x_data: np.ndarray, y_data: np.ndarray, name: str, **kwargs) -> <ast.Constant object at 0x0000022D13972150>
    def set_trace(trace_name: str, x_data: np.ndarray, y_data: np.ndarray, mode: Optional[str], color: Optional[str], style: Optional[str], width: Optional[int], marker_style: Optional[str], visible: Optional[bool], opacity: Optional[float]) -> <ast.Constant object at 0x0000022D138E8850>
    def get_traces() -> List[<ast.Constant object at 0x0000022D138EA290>]
    def get_markers() -> List[<ast.Constant object at 0x0000022D1391F010>]
    def get_cursors() -> List[<ast.Constant object at 0x0000022D1391C650>]
    def create_marker(x: float, y: float, name: str, **kwargs) -> <ast.Constant object at 0x0000022D138F5650>
    def set_marker(name: str, x: float, y: float, color: Optional[str], size: Optional[int], symbol: Optional[str], visible: Optional[bool]) -> <ast.Constant object at 0x0000022D13E155D0>
    def create_cursor(position: float, axis: str, name: str, **kwargs) -> <ast.Constant object at 0x0000022D13E47E10>
    def set_cursor(name: str, position: float, axis: Optional[str], color: Optional[str], style: Optional[str], width: Optional[int], visible: Optional[bool]) -> <ast.Constant object at 0x0000022D1398D390>
    def clear()


# src\pymetr\models\table.py
class DataTable(BaseModel):
    def __init__(title: str, columns: Optional[List[str]], model_id: Optional[str])
    def columns() -> List[str]
    def columns(column_names: List[str])
    def data() -> pd.DataFrame
    def data(new_data: pd.DataFrame)
    def get_columns() -> List[str]
    def set_columns(column_names: List[str])
    def add_column(column_name: str)
    def row_count() -> int
    def col_count() -> int
    def add_row(row_data: Optional[List[Any]]) -> int
    def remove_row(index: int)
    def get_data() -> pd.DataFrame
    def set_data(new_data: List[List[Any]])
    def get_value(row: int, col: int) -> Any
    def set_value(row: int, col: int, value: Any)


# src\pymetr\models\test.py
class TestStatus(Enum): pass

class ResultStatus(Enum):
    def from_bool(cls, success: bool) -> <ast.Constant object at 0x0000022D13DE51D0>

class RunConfig(BaseModel):
    def __init__(**kwargs)
    def add_script(script_id: str, order: int)
    def remove_script(script_id: str)
    def get_execution_order() -> List[str]

class TestScript(BaseModel):
    def __init__(script_path: Path, model_id: Optional[str], name: Optional[str])
    def script_path() -> Path
    def status() -> str
    def status(value: str)
    def start_time() -> Optional[datetime]
    def elapsed_time() -> int
    def elapsed_time(value: int)
    def progress() -> float
    def progress(value: float)
    def on_started()
    def on_finished(success: bool, error_msg: str)

class TestSuite(BaseModel):
    def __init__(model_id: Optional[str], name: Optional[str])
    def add_script(script: TestScript)
    def remove_script(script_id: str)
    def get_scripts() -> List[TestScript]
    def get_run_configs() -> List[RunConfig]
    def get_default_config() -> Optional[RunConfig]

class TestGroup(BaseModel):
    def __init__(state, name, **kwargs)
    def add(child_or_children)

class TestResult(TestGroup):
    def __init__(state, name, **kwargs)
    def progress() -> float
    def progress(value: float)
    def status() -> Optional[ResultStatus]
    def status(value: Optional[ResultStatus])
    def add(child_or_children)


# src\pymetr\models\trace.py
class Trace(BaseModel):
    def __init__(x_data: np.ndarray, y_data: np.ndarray, name: str, model_id: Optional[str], **kwargs)
    def name() -> str
    def name(value: str)
    def x_data() -> np.ndarray
    def y_data() -> np.ndarray
    def data()
    def data(new_data)
    def color() -> Optional[str]
    def color(value: str)
    def style() -> str
    def style(value: str)
    def width() -> int
    def width(value: int)
    def marker_style() -> str
    def marker_style(value: str)
    def mode() -> str
    def mode(value: str)
    def visible() -> bool
    def visible(value: bool)
    def opacity() -> float
    def opacity(value: float)
    def update_data(x_data: np.ndarray, y_data: np.ndarray)
    def create_marker(x: float, y: Optional[float], name: str, **kwargs) -> <ast.Constant object at 0x0000022D13E6AC50>


# src\pymetr\scripts\A1 - Simple Plot.py
def run_test(test)

# src\pymetr\scripts\A2 - Real Time Plot.py
def run_test(test)

# src\pymetr\scripts\A3 - Test Results.py
def run_test(test)

# src\pymetr\scripts\A4 - Multiple Plots.py
def run_test(test)

# src\pymetr\scripts\A5 - Multiple Results.py
def run_test(test)

# src\pymetr\scripts\A6 - Advanced.py
def run_test(test)

# src\pymetr\scripts\bak\Frame_Rate_Plus.py
def run_test(test)

# src\pymetr\scripts\bak\Simple_Context_2.py
def run_test(test)

# src\pymetr\scripts\bak\Simple_Context_3.py
def run_test(test)

# src\pymetr\scripts\bak\context_test.py
def run_test(test)

# src\pymetr\scripts\bak\context_test_complete.py
def run_test(test)

# src\pymetr\scripts\bak\power_sweep.py
def run_test(test)

# src\pymetr\scripts\fun\celestial.py
def run_test(test)

# src\pymetr\scripts\fun\evolution.py
def run_test(test)

# src\pymetr\scripts\fun\quantum.py
def run_test(test)

# src\pymetr\scripts\fun\symphony.py
def run_test(test)

# src\pymetr\services\file_service.py
class FileService(QObject):
    def get_instance(cls)
    def __init__()
    def add_recent_file(file_path: str, file_type: str, metadata: Optional[Dict])
    def remove_recent_file(file_path: str)
    def clear_recent_files()
    def get_recent_files(file_type: Optional[str], max_count: Optional[int]) -> List[Dict]
    def format_timestamp(timestamp_str: str) -> str
    def is_in_recent_files(file_path: str) -> bool
    def get_recent_file_entry(file_path: str) -> Optional[Dict]
    def export_model_data(model_id: str, state, path: Path) -> bool
    def import_model_data(path: Path, state) -> Optional[str]
    def open_suite(parent: Optional[QWidget]) -> Tuple[<ast.Tuple object at 0x0000022D1398C110>]
    def save_suite(suite: TestSuite, parent: Optional[QWidget]) -> Tuple[<ast.Tuple object at 0x0000022D1397D790>]


# src\pymetr\services\resource_service.py
class ResourceService(QObject):
    def get_instance(cls)
    def __init__()
    def get_icon(name: str, fallback: Optional[str]) -> QIcon
    def get_pixmap(name: str, width: int, height: int) -> QPixmap
    def clear_cache()
    def create_qrc_file(output_path: Optional[Path]) -> bool
    def compile_resources(qrc_path: Optional[Path], output_path: Optional[Path]) -> bool


# src\pymetr\services\script_service.py
class ScriptService:
    def create_script(parent: Optional[QWidget]) -> Tuple[<ast.Tuple object at 0x0000022D13940150>]
    def open_script(parent: Optional[QWidget]) -> Tuple[<ast.Tuple object at 0x0000022D13E14E50>]


# src\pymetr\services\theme_service.py
class ThemeService(QObject):
    def get_instance(cls)
    def __init__()
    def get_current_theme() -> str
    def set_theme(theme_name: str) -> bool
    def get_accent_color() -> QColor
    def set_accent_color(color: QColor) -> bool
    def get_stylesheet() -> str
    def apply_theme(app: QApplication) -> bool


# src\pymetr\ui\main_window.py
class MainWindow(QMainWindow):
    def __init__(state)
    def paintEvent(event)


# src\pymetr\ui\quick_toolbar.py
class QuickToolBar(QToolBar):
    def __init__(state, parent)


# src\pymetr\ui\status_bar.py
class StatusBar(QStatusBar):
    def __init__(state)
    def update_connection_status(connected, device_name)


# src\pymetr\ui\tab_manager.py
class TabManager(QTabWidget):
    def __init__(state, parent)
    def show_welcome()
    def open_tab(model_id: str) -> bool
    def get_current_view() -> Optional[BaseWidget]


# src\pymetr\ui\title_bar.py
class TitleBar(QWidget):
    def __init__(parent, state)
    def on_minimize_clicked()
    def on_maximize_clicked()
    def on_close_clicked()
    def mousePressEvent(event)
    def mouseMoveEvent(event)
    def mouseReleaseEvent(event)


# src\pymetr\ui\components\color_picker.py
class ColorButton(QToolButton):
    def __init__(color, parent)
    def color()
    def setColor(color)
    def paintEvent(event)

class ThemeButton(QToolButton):
    def __init__(theme, parent)
    def theme()
    def setTheme(theme)

class ColorPicker(QWidget):
    def __init__(color, theme, parent)
    def color()
    def setColor(color)
    def theme()
    def setTheme(theme)


# src\pymetr\ui\components\log_level_selector.py
class LogLevelSelector(QWidget):
    def __init__(parent)
    def set_level(level)
    def set_console_visible(visible)


# src\pymetr\ui\components\toolbar.py
class ToolBarButton(QToolButton):
    def __init__(icon, text, parent)

class ToolBarSeparator(QFrame):
    def __init__(parent)

class TabToolbar(QToolBar):
    def __init__(parent)
    def addButton(text, icon, callback: Optional[Callable])
    def addToggleButton(text, icon, checked, callback: Optional[Callable])
    def addDropdown(text, icon)
    def addWidget(widget)
    def addSeparator()
    def addStretch()
    def addComboBox(label: str, items: list, callback: Optional[Callable])


# src\pymetr\ui\dialogs\connection_dialog.py
class ConnectionDialog(QDialog):
    def __init__(parent)


# src\pymetr\ui\dialogs\discovery_dialog.py
class DiscoveryDialog(QDialog):
    def __init__(state, model_filter, parent)


# src\pymetr\ui\docks\console_dock.py
class ConsoleDock(QDockWidget):
    def __init__(parent)
    def set_log_level(level)
    def closeEvent(event)


# src\pymetr\ui\docks\device_tree_view.py
class DeviceTreeView(BaseWidget):
    def __init__(state, model_id: Optional[str], parent)
    def update_from_model(model: Device)


# src\pymetr\ui\docks\model_tree_view.py
class ModelTreeView(BaseWidget):
    def __init__(state, parent)
    def cleanup()


# src\pymetr\ui\factories\instrument_factory.py
class InstrumentFactory:
    def __init__()
    def create_instrument_data_from_driver(path: str) -> dict
    def create_ui_configuration_from_source(source: str) -> dict
    def set_current_instrument(instrument)
    def parse_source_file(path: str) -> dict
    def generate_gui_methods_dict(instrument_data: dict) -> dict
    def generate_other_methods_dict(instrument_data: dict) -> dict
    def generate_sources_list(instrument_data: dict) -> list
    def generate_properties_list(properties: list, class_name: str, index: int, subsystem: str) -> list
    def construct_param_dict(prop: dict, class_name: str, index: int, subsystem: str) -> dict
    def generate_parameter_tree_dict(instrument_data: dict) -> list
    def create_subsystem_group(subsystem_name, subsystem_info: dict) -> dict


# src\pymetr\ui\factories\parameter_factory.py
class ParameterFactory:
    def register_parameter(cls, model_type: str, parameter_class: Type[ModelParameter]) -> <ast.Constant object at 0x0000022D13E26910>
    def create_parameter(cls, model) -> Optional[ModelParameter]
    def available_parameter_types(cls) -> Dict[<ast.Tuple object at 0x0000022D1390AB10>]
    def get_icon(cls, model_type: str) -> QIcon
    def register_icon(cls, model_type: str, icon_path: str) -> <ast.Constant object at 0x0000022D13DE2910>

def create_parameter_for_model(model) -> Optional[ModelParameter]

# src\pymetr\ui\factories\tab_factory.py
class TabFactory:
    def register_view(cls, model_type: str, view_class: Type[BaseWidget]) -> <ast.Constant object at 0x0000022D13945C50>
    def create_view(cls, state: ApplicationState, model_id: str, parent: Optional[QWidget]) -> Optional[BaseWidget]
    def create_content_dock(cls, state: ApplicationState, model_id: str, parent: QWidget) -> Optional[QDockWidget]
    def create_welcome(cls, state: ApplicationState, parent: QWidget) -> WelcomeTab


# src\pymetr\ui\parameters\analysis_dual_parameter.py
class DualAnalysisParameter(AnalysisParameter):
    def __init__(**opts)
    def setupParameters()


# src\pymetr\ui\parameters\analysis_parameter.py
class AnalysisParameter(ModelParameter):
    def __init__(**opts)

class AnalysisStatusWidget(ParameterWidget):
    def __init__(param, parent)


# src\pymetr\ui\parameters\base.py
class ParameterWidget(QWidget):
    def __init__(param, parent)
    def queue_update(**kwargs)
    def cleanup()
    def isDeleted()

class ModelParameterItem(ParameterItem):
    def __init__(param, depth, **kwargs)
    def optsChanged(param, changes)
    def treeWidgetChanged() -> <ast.Constant object at 0x0000022D13DCEED0>
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def contextMenuEvent(ev) -> <ast.Constant object at 0x0000022D1391D150>
    def addCustomContextActions(menu: QMenu)
    def addStandardContextActions(menu: QMenu)
    def cleanup()

class ModelParameter(Parameter):
    def __init__(**opts)
    def setupParameters(model)
    def begin_update()
    def end_update()
    def set_model_property(name: str, value: Any)
    def get_model_property(name: str, default: Any) -> Any
    def remove_model()


# src\pymetr\ui\parameters\cursor_parameter.py
class CursorPreviewWidget(ParameterWidget):
    def __init__(param, parent)

class CursorLinePreview(QWidget):
    def __init__(parent)
    def update_style(axis: str, color: str, style: str, width: int)
    def paintEvent(event)

class CursorParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class CursorParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[Cursor])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\data_table_parameter.py
class DataTableDisplayWidget(ParameterWidget):
    def __init__(param, parent)

class DataTableParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def treeWidgetChanged() -> <ast.Constant object at 0x0000022D13DDAB90>

class DataTableParameter(ModelParameter):
    def __init__(**opts)
    def handle_property_update(name: str, value: Any)


# src\pymetr\ui\parameters\device_parameter.py
class LEDIndicator(QLabel):
    def __init__(size, parent)
    def set_state(state: str)
    def paintEvent(event)

class DeviceInfoWidget(ParameterWidget):
    def __init__(param, parent)
    def cleanup()

class DeviceParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class DeviceParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(device)
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\marker_parameter.py
class MarkerPreviewWidget(ParameterWidget):
    def __init__(param, parent)

class MarkerSymbolPreview(QWidget):
    def __init__(parent)
    def update_style(color: str, symbol: str, size: int, uncertainty: Tuple[<ast.Tuple object at 0x0000022D13DF21D0>])
    def paintEvent(event)

class MarkerInfoWidget(ParameterWidget):
    def __init__(param, parent)

class MarkerParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class MarkerParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[Marker])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\plot_parameter.py
class ItemCountIcon(QWidget):
    def __init__(icon_path: str, badge_color: str, text_color: str, parent)
    def setCount(count: int)
    def paintEvent(event)

class PlotInfoWidget(ParameterWidget):
    def __init__(param, parent)
    def cleanup()

class PlotParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class PlotParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[Plot])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\test_result_parameter.py
class ResultStatusWidget(ParameterWidget):
    def __init__(param, parent)
    def queue_update(**kwargs)
    def contextMenuEvent(event)

class TestResultParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class TestResultParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[TestResult])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\test_script_parameter.py
class TestProgressWidget(ParameterWidget):
    def __init__(param, parent)
    def contextMenuEvent(event)

class TestScriptParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class TestScriptParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[TestScript])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\test_suite_parameter.py
class TestSuiteStatusWidget(ParameterWidget):
    def __init__(param, parent)

class TestSuiteParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class TestSuiteParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[TestSuite])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\parameters\trace_parameter.py
class TraceStylePreview(QWidget):
    def __init__(parent)
    def update_style(color: str, style: str, width: int)
    def set_length(length: int)
    def paintEvent(event)

class TraceInfoWidget(ParameterWidget):
    def __init__(param, parent)
    def cleanup()

class TraceParameterItem(ModelParameterItem):
    def makeWidget() -> Optional[QWidget]
    def updateWidget(**kwargs)
    def addCustomContextActions(menu: QMenu)

class TraceParameter(ModelParameter):
    def __init__(**opts)
    def setupParameters(model: Optional[Trace])
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\tabs\base.py
class BaseTab(BaseWidget):
    def __init__(state, model_id: str, parent)
    def add_toolbar_separator()
    def add_toolbar_stretch()
    def add_toolbar_widget(widget: QWidget)
    def get_title() -> str


# src\pymetr\ui\tabs\device_tab.py
class DeviceTab(BaseTab):
    def __init__(state, model_id: str, parent)
    def cleanup()


# src\pymetr\ui\tabs\plot_tab.py
class AnalysisDialog(QDialog):
    def __init__(analysis_class: Type[Analysis], traces: List[tuple], parent)
    def get_config() -> Dict[<ast.Tuple object at 0x0000022D13985E10>]

class PlotTab(BaseTab):
    def __init__(state, model_id: str, parent)
    def set_status(message)

class MarkerDialog(QDialog):
    def __init__(traces, parent)
    def get_values()


# src\pymetr\ui\tabs\result_tab.py
class ResultTab(BaseTab):
    def __init__(state, model_id: str, parent)
    def set_model(model_id: str)


# src\pymetr\ui\tabs\script_tab.py
class ScriptTab(BaseTab):
    def __init__(state, model_id: str, parent)
    def set_model(model_id: str)


# src\pymetr\ui\tabs\table_tab.py
class FilterDialog(QDialog):
    def __init__(columns, parent)
    def get_filter()

class TableTab(BaseTab):
    def __init__(state, model_id: str, parent)
    def set_model(model_id: str)
    def handle_property_update(prop: str, value: Any)


# src\pymetr\ui\tabs\welcome_tab.py
class RecentItemWidget(QFrame):
    def __init__(item_id, name, item_type, timestamp, parent)
    def mousePressEvent(event)

class LinkLabel(QLabel):
    def __init__(text, command, parent)
    def mousePressEvent(event)

class WelcomeTab(BaseWidget):
    def __init__(state, parent)


# src\pymetr\ui\views\base.py
class BaseWidget(QWidget):
    def __init__(state, parent)
    def model_id()
    def model() -> BaseModel
    def set_model(model_id: str)
    def update_from_model(model: BaseModel)
    def update_model(**properties)
    def handle_property_update(prop: str, value: object)
    def closeEvent(event)


# src\pymetr\ui\views\device_control_view.py
class DeviceControlView(BaseWidget):
    def __init__(state, model_id: str, parent)


# src\pymetr\ui\views\device_view.py
class DeviceView(BaseWidget):
    def __init__(state, model_id: str, parent)
    def append_output(text: str, style: str)


# src\pymetr\ui\views\discovery_view.py
class InstrumentTable(QTableWidget):
    def __init__(parent)
    def update_instruments(instruments: Dict[<ast.Tuple object at 0x0000022D13E18490>])
    def get_selected_instrument() -> Optional[Dict]

class DiscoveryView(BaseWidget):
    def __init__(state, parent)
    def update_instruments(instruments: Dict[<ast.Tuple object at 0x0000022D13EBB350>])
    def get_selected_instrument() -> Optional[Dict]


# src\pymetr\ui\views\group_view.py
class MeasurementWidget(QFrame):
    def __init__(parent)
    def update_measurement(measurement: Measurement)

class LayoutMode(Enum): pass

class GroupView(BaseWidget):
    def __init__(state, model_id: str, parent)
    def set_model(model_id: str)
    def resizeEvent(event)
    def set_layout_mode(mode: LayoutMode)
    def cleanup()


# src\pymetr\ui\views\result_view.py
class ResultHeader(QFrame):
    def __init__(parent)
    def update_name(name: str)
    def update_status(status: str)

class MeasurementWidget(QFrame):
    def __init__(parent)
    def update_measurement(measurement: Measurement)

class LayoutMode(Enum): pass

class ResultView(BaseWidget):
    def __init__(state, model_id: str, parent)
    def set_model(model_id: str)
    def resizeEvent(event)
    def set_layout_mode(mode: LayoutMode)
    def cleanup()


# src\pymetr\ui\views\scpi_console.py
class SCPIConsole(QWidget):
    def __init__(state, model_id, parent)
    def eventFilter(obj, event)


# src\pymetr\ui\views\script_view.py
class LineNumberArea(QWidget):
    def __init__(editor)
    def sizeHint()
    def paintEvent(event)

class PythonHighlighter(QSyntaxHighlighter):
    def __init__(document)
    def highlightBlock(text: str)

class ScriptEditor(QPlainTextEdit):
    def __init__(parent)
    def line_number_area_width() -> int
    def update_line_number_area_width(_)
    def update_line_number_area(rect, dy)
    def resizeEvent(event)
    def line_number_area_paint_event(event)
    def highlight_current_line()

class ScriptView(BaseWidget):
    def __init__(state, model_id: str, parent)
    def set_font(font: QFont)
    def get_content() -> str
    def set_content(content: str)
    def set_original_content(content: str)
    def has_unsaved_changes() -> bool
    def set_read_only(read_only: bool)


# src\pymetr\ui\views\table_view.py
class TableView(BaseWidget):
    def __init__(state, model_id: str, parent)
    def handle_property_update(prop: str, value: Any)
    def get_selected_data() -> pd.DataFrame


# src\pymetr\ui\views\plot\cursor_handler.py
class CursorHandler(QObject):
    def __init__(plot_item: pg.PlotItem, state)
    def register_cursor(cursor_model) -> <ast.Constant object at 0x0000022D13EA7E50>
    def change_cursor(cursor_id: str, prop: str, value) -> <ast.Constant object at 0x0000022D13968ED0>
    def link_cursor(cursor_model) -> <ast.Constant object at 0x0000022D1396A490>
    def remove_cursor(cursor_id: str) -> <ast.Constant object at 0x0000022D13DCDBD0>


# src\pymetr\ui\views\plot\marker_handler.py
class MarkerHandler(QObject):
    def __init__(plot_item: pg.PlotItem, state)
    def register_marker(marker_model) -> <ast.Constant object at 0x0000022D13946E90>
    def change_marker(marker_id: str, prop: str, value) -> <ast.Constant object at 0x0000022D13907410>
    def link_marker(marker_model) -> <ast.Constant object at 0x0000022D13931490>
    def remove_marker(marker_id: str) -> <ast.Constant object at 0x0000022D13931E10>
    def interpolate(marker_model, x: float, parent_trace) -> float
    def update_label_positions() -> <ast.Constant object at 0x0000022D139AF850>
    def get_marker_at_pos(pos) -> Optional[str]
    def handle_property_change(model_id: str, model_type: str, prop: str, value: Any) -> <ast.Constant object at 0x0000022D13E4FAD0>


# src\pymetr\ui\views\plot\plot_view.py
class PlotView(BaseWidget):
    def __init__(state, model_id: str, parent)
    def set_model(model_id: str) -> <ast.Constant object at 0x0000022D13E68B10>
    def change_plot(prop: str, value: any) -> <ast.Constant object at 0x0000022D13E53650>
    def resizeEvent(event) -> <ast.Constant object at 0x0000022D13EA5990>
    def showEvent(event) -> <ast.Constant object at 0x0000022D13984890>
    def clear() -> <ast.Constant object at 0x0000022D13E54B10>
    def handle_mouse_clicked(event)
    def clear() -> <ast.Constant object at 0x0000022D13EC5DD0>
    def closeEvent(event) -> <ast.Constant object at 0x0000022D13EC68D0>


# src\pymetr\ui\views\plot\trace_handler.py
class TraceHandler(QObject):
    def __init__(plot_item: pg.PlotItem, plot_layout: pg.GraphicsLayoutWidget)
    def register_trace(trace_model) -> <ast.Constant object at 0x0000022D13DF30D0>
    def change_trace(model_id: str, prop: str, value: Any)
    def link_trace(trace_model) -> <ast.Constant object at 0x0000022D13931F50>
    def remove_trace(trace_id: str) -> <ast.Constant object at 0x0000022D139058D0>
    def debug_state()
    def clear_all() -> <ast.Constant object at 0x0000022D13EEED90>
    def update_geometry(main_rect) -> <ast.Constant object at 0x0000022D13EF6AD0>
    def get_traces_by_model_type(model_type: str) -> List[Tuple[<ast.Tuple object at 0x0000022D13F00090>]]


# tests\conftest.py
class TestModel(BaseModel):
    def __init__(name: str, model_id: str)

class TestScript(BaseModel):
    def __init__(name: str, model_id: str)

class TestResult(BaseModel):
    def __init__(name: str, model_id: str)

def qapp()
def state()
def test_model(state)
def test_script(state)
def test_result(state)
def success_result()
def failed_result()

# tests\test_actions.py
class SetNameCommand(ModelCommand):
    def __init__(state: <ast.Constant object at 0x0000022D13EA2150>, model_id: str, name: str)
    def execute() -> Result
    def undo() -> bool

def test_command_execution(state, test_model)
def test_command_undo(state, test_model)

# tests\test_core.py
def test_model_creation_and_registration(state)
def test_model_relationships(state)
def test_model_type_query(state)

# tests\test_main.py
def test_main()

# tests\test_main_window.py
def test_window_creation(state, qapp, qtbot)
def test_action_handling_success(state, qapp, qtbot, test_script)
def test_action_handling_failure(state, qapp, qtbot, monkeypatch)
def test_window_layout_constraints(state, qapp, qtbot)

# tests\test_ribbon.py
def test_default_context(state, qapp)
def test_script_context(state, qapp, test_script)
def test_action_triggering(state, qapp, test_script, qtbot)

# tests\test_state.py
def test_create_model(state)
def test_signal_emission(state)
def test_active_model(state)

# tests\test_tab_manager.py
class MockScriptView(QWidget):
    def __init__(state, model_id, parent)

class MockResultView(QWidget):
    def __init__(state, model_id, parent)

def test_tab_creation(state, qapp, test_script)
def test_tab_switching(state, qapp, test_script, test_result)

# tests\test_tree_view.py
def test_model_creation(state, qapp, test_script)
def test_model_hierarchy(state, qapp, test_script, test_result)
def test_selection_signal(state, qapp, test_script, qtbot)
def test_selection_triggers_tab_and_context(state, qapp, test_script, qtbot)

# tests\test_views.py
def test_view_registration(state, test_script)
def test_active_view(state, test_script, test_result)
def test_model_change_propagation(state, test_script)
def test_model_deletion(state, test_script)
def test_view_properties(state, test_script)

